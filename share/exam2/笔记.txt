moduleid chunkid生成时机在哪，生成规则
事件流程， 每个事件做了啥
自定义插件干扰时间执行流程
loader，识别位置 作用时机
plugin，识别位置作用 作用时机
compile compilation 作用 

entry 入口，webpack执行构建的第一步是从entry开始的，可以抽象成输入
module 模块，在webpack中一切皆模块，一个模块对应一个文件，webpack会从配置的entry开始，递归找出所有依赖的模块
chunk 代码块，一个chunk是由多个模块组合而成，用于代码的-合并和分割
loader 模块转换器，用于将模块的原内容按照需求转换为新的内容
plugin 扩展插件，在webpack构建流程中的特定时机广播对应的事件，插件可以监听这些事件的发生，在特定的时机做对应的事情

webpack的运行过程是一个串行的过程，从启动到结束会依次执行以下流程
初始化参数：从配置文件和shell语句中读取与合并参数，得出最终的参数
开始编译：用上一步得到的参数初始化compiler对象，加载所有配置的插件，通过执行对象的run方法开始执行编译
确定入口：根据配置中的entry找出所有的入口文件
编译模块：从入口文件出发，调用所有配置的loader对模块进行编译，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理
完成模块编译：在经过第4步使用loader翻译完所有模块后，得到了每个模块翻译后的最终内容以及他们之间的依赖关系
输出资源：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的chunk，再将每个chunk转换成一个单独的文件加入输出列表，这是可以修改输出内容的最后机会
输出完成：在确定好输出内容后，根据配置确定输出的路径和文件名，将文件的内容写入文件系统中

webpack会在特定的时间点广播特定的事件，插件在监听到感兴趣的事件之后会执行特定的逻辑，并且插件可以调用webpack提供的Api改变webpack的运行结果

webpack的构建流程可以分为一下三大阶段
初始化：启动构建，读取与合并配置参数，加载plugin，实例化compiler
编译：从entry发出，针对每个module串行调用对应的loader去翻译文件的内容，再找到该module依赖的module，递归地进行编译处理
输出：将编译后的module组合成chunk，将chunk转换成文件，输出到文件系统

webpack每一次的构建都会执行一遍上面的流程

1. 初始化阶段
1）初始化参数
从配置文件和shell语句中读取与合并参数，得出最终的参数，这个过程中还会执行配置文件中插件实例化语句new plugin()

2) 实例化compiler 
使用上一步初始化的配置实例化Compiler实例,Compiler负责文件的启动编译，在Compiler实例中包含完成的webpack配置，全局只存在一个Compiler实例
3）加载插件
依次调用插件的apply方法，让插件可以监听后续的所有事件节点，同时向插件传入compiler实例的引用，以方便插件通过compiler调用webpack提供的API
4）environment
开始应用node.js风格的文件系统到compiler对象，以方便后续的文件寻找和读取
5）entry-option
读取配置的entrys，为每个entry实例化一个对应的entryPlugin，为后面该entry递归解析工作做准备
6）after-plugins 
调用完所有的内置的和配置的插件的apply方法
7）after-resolvers
根据配置初始化resolver，resolver负责在文件系统中寻找制定路径的文件

argv保存 当前命令行的执行参数
option 保存着配置行文件中的配置信息


2.编译阶段
1) run 
启动一次新的编译
2) watch-run
和run类似，区别在于他是在监听模式下启动编译，在这个事件中可以获取是哪些文件发生了变化，从而启动一次新的编译
3) compile 
开始编译 根据配置文件不同区分单入口或多入口
compile是为了告诉插件一次新的编译将要启动，同时给插件带上compiler对象
4) compilation
当webpack以开发模式运行时，每当检测到文件变化的时候，便会有一个新的compilation被创建
compilation包含了当前的模块资源，编译生成资源，变化的文件等。compilation也提供了很多事件回调给插件进行扩展
5) make
从入口点分析模块，建立module对象，他依赖的其他module都写入对应数组保存
一个新的compilation创建完毕，即将从Entry开始读取文件，根据文件的类型和配置的loader，对文件进行编译，编译完成后再找出该文件依赖的文件，递归低编译和解析
make的来源在EntryOptionPlugin插件中，无论entry参数是单入口字符串、单入口数组、多入口对象还是动态函数，都会在引入对应的入口插件后，注入一个make事件。
6) after-compiler
依次compilation执行完成
7) invalid 
当遇到文件不存在，文件编译错误等异常时会触发改事件，该事件不会触发webpack退出

build 构建模块
(make中的一个步骤）build时调用runloader找到加载每种不同资源的loader进行处理，最后转换成js后用arcon.js把源码转换成AST语法树，再分析语法树，提取依赖关系存入供下一步使用




在编译阶段，最重要的事件是compilation，因为在compilation阶段调用了loader，完成了每个模块的转换操作
在compilation阶段又触发了下面的小事件
1) build-module 
使用对应的loader去转换一个模块
2) normal-module-loader
在用loader转换成一个模块后，使用acorn解析转换后的内容，输出对应的抽象语法树(AST)，以方便webpack在后面对代码进行分析
3) program
从配置文件入口模块开始，分析其AST，当遇到require等导入其他模块的语句时，便将其加入依赖的模块列表中，同时对新找出的依赖模块递归分析，最终弄清楚所有模块的依赖关系
4) seal
所有模块及其依赖的模块都通过loader转换完成，根据依赖关系开始生成chunk
根据配置和之前分析的依赖关系分配代码，把module粒度的代码加入到对应的chunk（代码块）里，每一个chunk最后就对应一个输出的目标js （提取公共js在这里完成）

3.输出阶段
1) should-emit
所有需要输出的文件已经生成，询问插件有那些文件需要输出，有哪些不需要输出
2) emit 
确定好要输出哪些文件后，执行文件输出，可以在这里获取和修改输出的内容
3) after-emit
文件输出完毕
4) done 
成功完成一次完整的编译和输出流程
5) failed 
如果在编译和输出的流程中遇到异常，导致webpack退出，就直接跳到本步骤，插件可以在本事件中获取具体的错误原因

在输出阶段已经得到了各个模块经过转换后的结果和其依赖关系，并且将相关模块组合在一起形成一个个chunk，在输出阶段会根据chunk类型，使用对应的模版生成最终要输出的文件内容


每一个内部插件，都是通过监听任务点的方式，来实现自定义的逻辑



docker 保证安装版本和全局版本一致？？ 
docker 前端化

通过tapbale注册的这种方式，就会达到表面上是一个钩子的简单触发，实际上是一个或者多个的方法的同步或者异步的执行
这就导致了webpack本质上就是一个tapable做的架子，和一堆插件组成的




{ mode: 'development',
  entry: './src/app.js',
  output:
   { path: '/Users/zhangxk/demo/03.webpack/share/exam2/dist',
     filename: '[name].bundle.js',
     chunkFilename: '[name].bundle.js',
     webassemblyModuleFilename: '[modulehash].module.wasm',
     library: '',
     hotUpdateFunction: 'webpackHotUpdate',
     jsonpFunction: 'webpackJsonp',
     chunkCallbackName: 'webpackChunk',
     globalObject: 'window',
     devtoolNamespace: '',
     libraryTarget: 'var',
     pathinfo: true,
     sourceMapFilename: '[file].map[query]',
     hotUpdateChunkFilename: '[id].[hash].hot-update.js',
     hotUpdateMainFilename: '[hash].hot-update.json',
     crossOriginLoading: false,
     jsonpScriptType: false,
     chunkLoadTimeout: 120000,
     hashFunction: 'md4',
     hashDigest: 'hex',
     hashDigestLength: 20,
     devtoolLineToLine: false,
     strictModuleExceptionHandling: false },
  context: '/Users/zhangxk/demo/03.webpack/share/exam2',
  devtool: 'eval',
  cache: true,
  target: 'web',
  module:
   { unknownContextRequest: '.',
     unknownContextRegExp: false,
     unknownContextRecursive: true,
     unknownContextCritical: true,
     exprContextRequest: '.',
     exprContextRegExp: false,
     exprContextRecursive: true,
     exprContextCritical: true,
     wrappedContextRegExp: /.*/,
     wrappedContextRecursive: true,
     wrappedContextCritical: false,
     strictExportPresence: false,
     strictThisContextOnImports: false,
     unsafeCache: true,
     rules: [],
     defaultRules: [ [Object], [Object], [Object], [Object] ] },
  node:
   { console: false,
     process: true,
     global: true,
     Buffer: true,
     setImmediate: true,
     __filename: 'mock',
     __dirname: 'mock' },
  performance: false,
  optimization:
   { removeAvailableModules: true,
     removeEmptyChunks: true,
     mergeDuplicateChunks: true,
     flagIncludedChunks: false,
     occurrenceOrder: false,
     sideEffects: false,
     providedExports: true,
     usedExports: false,
     concatenateModules: false,
     splitChunks:
      { hidePathInfo: false,
        chunks: 'async',
        minSize: 10000,
        minChunks: 1,
        maxAsyncRequests: Infinity,
        automaticNameDelimiter: '~',
        maxInitialRequests: Infinity,
        name: true,
        cacheGroups: [Object] },
     runtimeChunk: undefined,
     noEmitOnErrors: false,
     checkWasmTypes: false,
     mangleWasmImports: false,
     namedModules: true,
     hashedModuleIds: false,
     namedChunks: true,
     portableRecords: false,
     minimize: false,
     minimizer: [ [Object] ],
     nodeEnv: 'development' },
  resolve:
   { unsafeCache: true,
     modules: [ 'node_modules' ],
     extensions: [ '.wasm', '.mjs', '.js', '.json' ],
     mainFiles: [ 'index' ],
     aliasFields: [ 'browser' ],
     mainFields: [ 'browser', 'module', 'main' ],
     cacheWithContext: false },
  resolveLoader:
   { unsafeCache: true,
     mainFields: [ 'loader', 'main' ],
     extensions: [ '.js', '.json' ],
     mainFiles: [ 'index' ],
     cacheWithContext: false } }


{ mode: 'development',
  entry: './src/app.js',
  output:
   { path: '/Users/zhangxk/demo/03.webpack/share/exam2/dist',
     filename: '[name].bundle.js',
     chunkFilename: '[name].bundle.js',
     webassemblyModuleFilename: '[modulehash].module.wasm',
     library: '',
     hotUpdateFunction: 'webpackHotUpdate',
     jsonpFunction: 'webpackJsonp',
     chunkCallbackName: 'webpackChunk',
     globalObject: 'window',
     devtoolNamespace: '',
     libraryTarget: 'var',
     pathinfo: true,
     sourceMapFilename: '[file].map[query]',
     hotUpdateChunkFilename: '[id].[hash].hot-update.js',
     hotUpdateMainFilename: '[hash].hot-update.json',
     crossOriginLoading: false,
     jsonpScriptType: false,
     chunkLoadTimeout: 120000,
     hashFunction: 'md4',
     hashDigest: 'hex',
     hashDigestLength: 20,
     devtoolLineToLine: false,
     strictModuleExceptionHandling: false },
  context: '/Users/zhangxk/demo/03.webpack/share/exam2',
  devtool: 'eval',
  cache: true,
  target: 'web',
  module:
   { unknownContextRequest: '.',
     unknownContextRegExp: false,
     unknownContextRecursive: true,
     unknownContextCritical: true,
     exprContextRequest: '.',
     exprContextRegExp: false,
     exprContextRecursive: true,
     exprContextCritical: true,
     wrappedContextRegExp: /.*/,
     wrappedContextRecursive: true,
     wrappedContextCritical: false,
     strictExportPresence: false,
     strictThisContextOnImports: false,
     unsafeCache: true,
     rules: [],
     defaultRules: [ [Object], [Object], [Object], [Object] ] },
  node:
   { console: false,
     process: true,
     global: true,
     Buffer: true,
     setImmediate: true,
     __filename: 'mock',
     __dirname: 'mock' },
  performance: false,
  optimization:
   { removeAvailableModules: true,
     removeEmptyChunks: true,
     mergeDuplicateChunks: true,
     flagIncludedChunks: false,
     occurrenceOrder: false,
     sideEffects: false,
     providedExports: true,
     usedExports: false,
     concatenateModules: false,
     splitChunks:
      { hidePathInfo: false,
        chunks: 'async',
        minSize: 10000,
        minChunks: 1,
        maxAsyncRequests: Infinity,
        automaticNameDelimiter: '~',
        maxInitialRequests: Infinity,
        name: true,
        cacheGroups: [Object] },
     runtimeChunk: undefined,
     noEmitOnErrors: false,
     checkWasmTypes: false,
     mangleWasmImports: false,
     namedModules: true,
     hashedModuleIds: false,
     namedChunks: true,
     portableRecords: false,
     minimize: false,
     minimizer: [ [Object] ],
     nodeEnv: 'development' },
  resolve:
   { unsafeCache: true,
     modules: [ 'node_modules' ],
     extensions: [ '.wasm', '.mjs', '.js', '.json' ],
     mainFiles: [ 'index' ],
     aliasFields: [ 'browser' ],
     mainFields: [ 'browser', 'module', 'main' ],
     cacheWithContext: false },
  resolveLoader:
   { unsafeCache: true,
     mainFields: [ 'loader', 'main' ],
     extensions: [ '.js', '.json' ],
     mainFiles: [ 'index' ],
     cacheWithContext: false } }



Compiler {
  _pluginCompat:
   SyncBailHook {
     _args: [ 'options' ],
     taps: [ [Object], [Object], [Object] ],
     interceptors: [],
     _call: [Function: lazyCompileHook],
     call: [Function: lazyCompileHook],
     _promise: [Function: lazyCompileHook],
     promise: [Function: lazyCompileHook],
     _callAsync: [Function: lazyCompileHook],
     callAsync: [Function: lazyCompileHook],
     _x: undefined },
  hooks:
   { shouldEmit:
      SyncBailHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        _call: [Function: lazyCompileHook],
        call: [Function: lazyCompileHook],
        _promise: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        _callAsync: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     done:
      AsyncSeriesHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        _call: undefined,
        call: undefined,
        _promise: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        _callAsync: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     additionalPass:
      AsyncSeriesHook {
        _args: [],
        taps: [],
        interceptors: [],
        _call: undefined,
        call: undefined,
        _promise: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        _callAsync: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     beforeRun:
      AsyncSeriesHook {
        _args: [Array],
        taps: [Array],
        interceptors: [],
        _call: undefined,
        call: undefined,
        _promise: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        _callAsync: [Function: lazyCompileHook],
        callAsync: [Function: anonymous],
        _x: [Array] },
     run:
      AsyncSeriesHook {
        _args: [Array],
        taps: [Array],
        interceptors: [],
        _call: undefined,
        call: undefined,
        _promise: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        _callAsync: [Function: lazyCompileHook],
        callAsync: [Function: anonymous],
        _x: [Array] },
     emit:
      AsyncSeriesHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        _call: undefined,
        call: undefined,
        _promise: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        _callAsync: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     afterEmit:
      AsyncSeriesHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        _call: undefined,
        call: undefined,
        _promise: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        _callAsync: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     thisCompilation:
      SyncHook {
        _args: [Array],
        taps: [Array],
        interceptors: [],
        _call: [Function: lazyCompileHook],
        call: [Function: lazyCompileHook],
        _promise: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        _callAsync: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     compilation:
      SyncHook {
        _args: [Array],
        taps: [Array],
        interceptors: [],
        _call: [Function: lazyCompileHook],
        call: [Function: lazyCompileHook],
        _promise: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        _callAsync: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     normalModuleFactory:
      SyncHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        _call: [Function: lazyCompileHook],
        call: [Function: lazyCompileHook],
        _promise: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        _callAsync: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     contextModuleFactory:
      SyncHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        _call: [Function: lazyCompileHook],
        call: [Function: lazyCompileHook],
        _promise: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        _callAsync: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     beforeCompile:
      AsyncSeriesHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        _call: undefined,
        call: undefined,
        _promise: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        _callAsync: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     compile:
      SyncHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        _call: [Function: lazyCompileHook],
        call: [Function: lazyCompileHook],
        _promise: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        _callAsync: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     make:
      AsyncParallelHook {
        _args: [Array],
        taps: [Array],
        interceptors: [],
        _call: undefined,
        call: undefined,
        _promise: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        _callAsync: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     afterCompile:
      AsyncSeriesHook {
        _args: [Array],
        taps: [Array],
        interceptors: [],
        _call: undefined,
        call: undefined,
        _promise: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        _callAsync: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     watchRun:
      AsyncSeriesHook {
        _args: [Array],
        taps: [Array],
        interceptors: [],
        _call: undefined,
        call: undefined,
        _promise: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        _callAsync: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     failed:
      SyncHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        _call: [Function: lazyCompileHook],
        call: [Function: lazyCompileHook],
        _promise: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        _callAsync: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     invalid:
      SyncHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        _call: [Function: lazyCompileHook],
        call: [Function: lazyCompileHook],
        _promise: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        _callAsync: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     watchClose:
      SyncHook {
        _args: [],
        taps: [],
        interceptors: [],
        _call: [Function: lazyCompileHook],
        call: [Function: lazyCompileHook],
        _promise: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        _callAsync: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     environment:
      SyncHook {
        _args: [],
        taps: [],
        interceptors: [],
        _call: [Function: lazyCompileHook],
        call: [Function: anonymous],
        _promise: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        _callAsync: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: [] },
     afterEnvironment:
      SyncHook {
        _args: [],
        taps: [],
        interceptors: [],
        _call: [Function: lazyCompileHook],
        call: [Function: anonymous],
        _promise: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        _callAsync: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: [] },
     afterPlugins:
      SyncHook {
        _args: [Array],
        taps: [],
        interceptors: [],
        _call: [Function: lazyCompileHook],
        call: [Function: anonymous],
        _promise: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        _callAsync: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: [] },
     afterResolvers:
      SyncHook {
        _args: [Array],
        taps: [Array],
        interceptors: [],
        _call: [Function: lazyCompileHook],
        call: [Function: anonymous],
        _promise: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        _callAsync: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: [Array] },
     entryOption:
      SyncBailHook {
        _args: [Array],
        taps: [Array],
        interceptors: [],
        _call: [Function: lazyCompileHook],
        call: [Function: anonymous],
        _promise: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        _callAsync: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: [Array] } },
  name: undefined,
  parentCompilation: undefined,
  outputPath: '/Users/zhangxk/demo/03.webpack/share/exam2/dist',
  outputFileSystem:
   NodeOutputFileSystem {
     mkdirp:
      { [Function: mkdirP]
        mkdirP: [Circular],
        mkdirp: [Circular],
        sync: [Function: sync] },
     mkdir: [Function: bound ],
     rmdir: [Function: bound ],
     unlink: [Function: bound ],
     writeFile: [Function: bound ],
     join: [Function: bound join] },
  inputFileSystem:
   CachedInputFileSystem {
     fileSystem: NodeJsInputFileSystem {},
     _statStorage:
      Storage {
        duration: 60000,
        running: Map {},
        data: Map {},
        levels: [Array],
        count: 0,
        interval: null,
        needTickCheck: false,
        nextTick: null,
        passive: true,
        tick: [Function: bound tick] },
     _readdirStorage:
      Storage {
        duration: 60000,
        running: Map {},
        data: Map {},
        levels: [Array],
        count: 0,
        interval: null,
        needTickCheck: false,
        nextTick: null,
        passive: true,
        tick: [Function: bound tick] },
     _readFileStorage:
      Storage {
        duration: 60000,
        running: Map {},
        data: Map {},
        levels: [Array],
        count: 0,
        interval: null,
        needTickCheck: false,
        nextTick: null,
        passive: true,
        tick: [Function: bound tick] },
     _readJsonStorage:
      Storage {
        duration: 60000,
        running: Map {},
        data: Map {},
        levels: [Array],
        count: 0,
        interval: null,
        needTickCheck: false,
        nextTick: null,
        passive: true,
        tick: [Function: bound tick] },
     _readlinkStorage:
      Storage {
        duration: 60000,
        running: Map {},
        data: Map {},
        levels: [Array],
        count: 0,
        interval: null,
        needTickCheck: false,
        nextTick: null,
        passive: true,
        tick: [Function: bound tick] },
     _stat: [Function: bound bound ],
     _statSync: [Function: bound bound ],
     _readdir: [Function: bound readdir],
     _readdirSync: [Function: bound readdirSync],
     _readFile: [Function: bound bound readFile],
     _readFileSync: [Function: bound bound ],
     _readJson: [Function],
     _readJsonSync: [Function],
     _readlink: [Function: bound bound ],
     _readlinkSync: [Function: bound bound ] },
  recordsInputPath: undefined,
  recordsOutputPath: undefined,
  records: {},
  fileTimestamps: Map {},
  contextTimestamps: Map {},
  resolverFactory:
   ResolverFactory {
     _pluginCompat:
      SyncBailHook {
        _args: [Array],
        taps: [Array],
        interceptors: [],
        _call: [Function: lazyCompileHook],
        call: [Function: lazyCompileHook],
        _promise: [Function: lazyCompileHook],
        promise: [Function: lazyCompileHook],
        _callAsync: [Function: lazyCompileHook],
        callAsync: [Function: lazyCompileHook],
        _x: undefined },
     hooks: { resolveOptions: [Object], resolver: [Object] },
     cache1: WeakMap {},
     cache2: Map {} },
  resolvers:
   { normal:
      { plugins: [Function: deprecated],
        apply: [Function: deprecated] },
     loader:
      { plugins: [Function: deprecated],
        apply: [Function: deprecated] },
     context:
      { plugins: [Function: deprecated],
        apply: [Function: deprecated] } },
  options:
   { mode: 'development',
     entry: './src/app.js',
     output:
      { path: '/Users/zhangxk/demo/03.webpack/share/exam2/dist',
        filename: '[name].bundle.js',
        chunkFilename: '[name].bundle.js',
        webassemblyModuleFilename: '[modulehash].module.wasm',
        library: '',
        hotUpdateFunction: 'webpackHotUpdate',
        jsonpFunction: 'webpackJsonp',
        chunkCallbackName: 'webpackChunk',
        globalObject: 'window',
        devtoolNamespace: '',
        libraryTarget: 'var',
        pathinfo: true,
        sourceMapFilename: '[file].map[query]',
        hotUpdateChunkFilename: '[id].[hash].hot-update.js',
        hotUpdateMainFilename: '[hash].hot-update.json',
        crossOriginLoading: false,
        jsonpScriptType: false,
        chunkLoadTimeout: 120000,
        hashFunction: 'md4',
        hashDigest: 'hex',
        hashDigestLength: 20,
        devtoolLineToLine: false,
        strictModuleExceptionHandling: false },
     plugins: [],
     context: '/Users/zhangxk/demo/03.webpack/share/exam2',
     devtool: 'eval',
     cache: true,
     target: 'web',
     module:
      { unknownContextRequest: '.',
        unknownContextRegExp: false,
        unknownContextRecursive: true,
        unknownContextCritical: true,
        exprContextRequest: '.',
        exprContextRegExp: false,
        exprContextRecursive: true,
        exprContextCritical: true,
        wrappedContextRegExp: /.*/,
        wrappedContextRecursive: true,
        wrappedContextCritical: false,
        strictExportPresence: false,
        strictThisContextOnImports: false,
        unsafeCache: true,
        rules: [],
        defaultRules: [Array] },
     node:
      { console: false,
        process: true,
        global: true,
        Buffer: true,
        setImmediate: true,
        __filename: 'mock',
        __dirname: 'mock' },
     performance: false,
     optimization:
      { removeAvailableModules: true,
        removeEmptyChunks: true,
        mergeDuplicateChunks: true,
        flagIncludedChunks: false,
        occurrenceOrder: false,
        sideEffects: false,
        providedExports: true,
        usedExports: false,
        concatenateModules: false,
        splitChunks: [Object],
        runtimeChunk: undefined,
        noEmitOnErrors: false,
        checkWasmTypes: false,
        mangleWasmImports: false,
        namedModules: true,
        hashedModuleIds: false,
        namedChunks: true,
        portableRecords: false,
        minimize: false,
        minimizer: [Array],
        nodeEnv: 'development' },
     resolve:
      { unsafeCache: true,
        modules: [Array],
        extensions: [Array],
        mainFiles: [Array],
        aliasFields: [Array],
        mainFields: [Array],
        cacheWithContext: false },
     resolveLoader:
      { unsafeCache: true,
        mainFields: [Array],
        extensions: [Array],
        mainFiles: [Array],
        cacheWithContext: false } },
  context: '/Users/zhangxk/demo/03.webpack/share/exam2',
  requestShortener:
   RequestShortener {
     currentDirectoryRegExp: /(^|!)\/Users\/zhangxk\/demo\/03\.webpack\/share\/exam2/g,
     parentDirectoryRegExp: /(^|!)\/Users\/zhangxk\/demo\/03\.webpack\/share/g,
     buildinsAsModule: true,
     buildinsRegExp: /(^|!)\/Users\/zhangxk\/demo\/03\.webpack\/share\/exam2\/node_modules\/webpack/g,
     cache: Map {} },
  running: true,
  watchFileSystem:
   NodeWatchFileSystem {
     inputFileSystem:
      CachedInputFileSystem {
        fileSystem: NodeJsInputFileSystem {},
        _statStorage: [Object],
        _readdirStorage: [Object],
        _readFileStorage: [Object],
        _readJsonStorage: [Object],
        _readlinkStorage: [Object],
        _stat: [Function: bound bound ],
        _statSync: [Function: bound bound ],
        _readdir: [Function: bound readdir],
        _readdirSync: [Function: bound readdirSync],
        _readFile: [Function: bound bound readFile],
        _readFileSync: [Function: bound bound ],
        _readJson: [Function],
        _readJsonSync: [Function],
        _readlink: [Function: bound bound ],
        _readlinkSync: [Function: bound bound ] },
     watcherOptions: { aggregateTimeout: 200 },
     watcher:
      EventEmitter {
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        options: [Object],
        watcherOptions: [Object],
        fileWatchers: [],
        dirWatchers: [],
        mtimes: {},
        paused: false,
        aggregatedChanges: [],
        aggregatedRemovals: [],
        aggregateTimeout: 0,
        _onTimeout: [Function: bound _onTimeout] } },
  dependencies: undefined }

