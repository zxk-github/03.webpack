编译ES6 ES7
webpack中编译，以及处理静态文件都会使用到loader
Babel
Babel-preset

npm install babel-loader@8.0.0-beta.0 @babel/core
npm install --save-dev babel-loader babel-core

下载完成之后，这时候babel还不知道要以哪种规范进行打包，这时候，需要设置babel-preset
babel-preset实际上是一个标准的一个汇总
es2015
es2016
es2017
env 上面三个都包含
babel-preset-react 一些自定义的标准
babel-preset-stage 0-3 这是一些还没发布的版本的
npm install @babel/preset-env --save-dev
npm install babel-preset-env --save-dev

babel preset 参数
targets 根据目标来判断哪些语法进行编译， 哪些不进行编译
targets.browsers
targets.browsers: 'last 2 versions' //主流浏览器最近的两个版本
targets.browsers: '>1%' //占有率大于1%的浏览器，都要进行支持
(数据来源can i use, browserlist)
targets.node

babel polyfill
babel runtime transform
语法变换是通过babel-preset， 它用来指定规范的版本， 只是针对语法， 但是一些方法， 比如说arr.includes(); 这个方法在很多浏览器中并没有实现，这时候就要使用babel polyfill 和 babel runtime transform
新的方法
Generator
Set
Map
Array.from等等
babel polyfill 全局垫片，每个浏览器对标准的实现不一致，这时候需要一个垫片来保证，API的一致性，这个垫片是全局的， 一旦引入就可以在浏览器全局内，对它所实现的API进行一些调用，比如说promise, arr的一些方法， 引入babel polyfill以后， 就会在全局进行一些方法的定义，相当于就是由一个全局的污染，很明显，这个东西就是为开发应用准备的，(应用就是比如说一个网站， 框架就是为别人写的，比如说vue);
npm install babel-polyfill --save
使用只需要在代码的最前端import 'babel-polyfill', 以后就可以随意的写ES7/ES6的语法，新的方法

babel runtime transform 一个局部垫片，为开发框架准备的，不会污染全局，不会在代码全局新加方法，会在代码的局部新加方法，当在代码中使用的时候，其他的函数如果使用到ES7/ES6，它会把每一个方法都打包在一个单独的文件中，
npm install babel-plugin-transform-runtime --save-dev
npm install babel-runtime --save
使用方法
在项目根文件下新建一个babel配置文件.babelrc, 在这里面进行babel相关的配置






